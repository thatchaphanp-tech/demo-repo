{
	"info": {
		"_postman_id": "6c0c949e-d0b8-4df3-a539-07fa805f76f7",
		"name": "Design",
		"description": "# Design API Collection\n\nThis collection provides a structured set of endpoints for managing Products, Orders, Categories, and Reviews in your API. Each folder groups related endpoints for easier navigation and testing. \n\n## Folders & Endpoints\n\n### Products\n- **Create new product**: Create a new product in the catalog.\n- **GET /products**: Retrieve a list of all products.\n- **PUT /products/1**: Update details of a specific product.\n- **DELETE /products/1**: Remove a product from the catalog.\n\n### Orders\n- **POST /orders**: Create a new order.\n\n### Categories\n- **GET /categories**: Retrieve all product categories.\n\n### Reviews\n- **GET /products/{id}/reviews**: Get reviews for a specific product.\n\n## Usage\n- Each request includes a basic test script to validate status codes and response structure.\n- Example responses are provided where available.\n\n## Mock Server\nA mock server is linked to this collection for simulating API responses during development and testing.\n\n---\nFor authentication, environment variables, and further details, see individual request descriptions or contact the API maintainer.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18433138"
	},
	"item": [
		{
			"name": "Products",
			"item": [
				{
					"name": "DELETE /products/1",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 204\", function () { pm.response.to.have.status(204); });"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://8cb59922-6e6c-4153-936c-6b99f73acdcf.mock.pstmn.io/products/1",
							"protocol": "https",
							"host": [
								"8cb59922-6e6c-4153-936c-6b99f73acdcf",
								"mock",
								"pstmn",
								"io"
							],
							"path": [
								"products",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT /products/1",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"pm.test(\"Response is JSON\", function () { pm.response.to.be.json; });"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"name\": \"Wireless Mechanical Keyboard\", \"sku\": \"KB-WL-MECH-001\", \"description\": \"Premium mechanical keyboard with customizable RGB backlighting and wireless connectivity.\", \"price\": 3500.00, \"stock_quantity\": 45, \"is_available\": true}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://8cb59922-6e6c-4153-936c-6b99f73acdcf.mock.pstmn.io/products/1",
							"protocol": "https",
							"host": [
								"8cb59922-6e6c-4153-936c-6b99f73acdcf",
								"mock",
								"pstmn",
								"io"
							],
							"path": [
								"products",
								"1"
							]
						}
					},
					"response": [
						{
							"name": "200 OK - Product Updated",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"name\": \"Wireless Mechanical Keyboard\", \"sku\": \"KB-WL-MECH-001\", \"description\": \"Premium mechanical keyboard with customizable RGB backlighting and wireless connectivity.\", \"price\": 3500.00, \"stock_quantity\": 45, \"is_available\": true}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://8cb59922-6e6c-4153-936c-6b99f73acdcf.mock.pstmn.io/products/1",
									"protocol": "https",
									"host": [
										"8cb59922-6e6c-4153-936c-6b99f73acdcf",
										"mock",
										"pstmn",
										"io"
									],
									"path": [
										"products",
										"1"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": ""
								}
							],
							"cookie": [],
							"body": "{\"name\": \"Wireless Mechanical Keyboard\", \"sku\": \"KB-WL-MECH-001\", \"description\": \"Premium mechanical keyboard with customizable RGB backlighting and wireless connectivity.\", \"price\": 3500.00, \"stock_quantity\": 45, \"is_available\": true}"
						},
						{
							"name": "401 Unauthorized",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"name\":\"Updated Product Name\",\"price\":99.99}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://8cb59922-6e6c-4153-936c-6b99f73acdcf.mock.pstmn.io/products/1",
									"protocol": "https",
									"host": [
										"8cb59922-6e6c-4153-936c-6b99f73acdcf",
										"mock",
										"pstmn",
										"io"
									],
									"path": [
										"products",
										"1"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"error\": \"Unauthorized. Please provide a valid authentication token.\"\n}"
						}
					]
				},
				{
					"name": "GET /products",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"pm.test(\"Response is JSON\", function () { pm.response.to.be.json; });"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://8cb59922-6e6c-4153-936c-6b99f73acdcf.mock.pstmn.io/products",
							"protocol": "https",
							"host": [
								"8cb59922-6e6c-4153-936c-6b99f73acdcf",
								"mock",
								"pstmn",
								"io"
							],
							"path": [
								"products"
							]
						}
					},
					"response": [
						{
							"name": "200 OK - Product List",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": "json"
									}
								},
								"url": {
									"raw": "https://8cb59922-6e6c-4153-936c-6b99f73acdcf.mock.pstmn.io/products",
									"protocol": "https",
									"host": [
										"8cb59922-6e6c-4153-936c-6b99f73acdcf",
										"mock",
										"pstmn",
										"io"
									],
									"path": [
										"products"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "[{\"name\": \"Wireless Mechanical Keyboard\", \"sku\": \"KB-WL-MECH-001\", \"price\": 3500.00, \"is_available\": true}]"
						},
						{
							"name": "500 Internal Server Error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://8cb59922-6e6c-4153-936c-6b99f73acdcf.mock.pstmn.io/products",
									"protocol": "https",
									"host": [
										"8cb59922-6e6c-4153-936c-6b99f73acdcf",
										"mock",
										"pstmn",
										"io"
									],
									"path": [
										"products"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"error\": \"Unexpected server error. Please try again later.\"\n}"
						}
					]
				},
				{
					"name": "Create new product",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 201\", function () { pm.response.to.have.status(201); });",
									"pm.test(\"Response is JSON\", function () { pm.response.to.be.json; });"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{xyz}}/products/1",
							"host": [
								"{{xyz}}"
							],
							"path": [
								"products",
								"1"
							]
						}
					},
					"response": [
						{
							"name": "Create new product",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{xyz}}/products/1",
									"host": [
										"{{xyz}}"
									],
									"path": [
										"products",
										"1"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"domain": "",
									"path": ""
								}
							],
							"body": "{\n  \"name\": \"Wireless Mechanical Keyboard\",\n  \"sku\": \"KB-WL-MECH-001\",\n  \"description\": \"Premium mechanical keyboard with customizable RGB backlighting and wireless connectivity.\",\n  \"price\": 3500.00,\n  \"stock_quantity\": 50,\n  \"is_available\": true\n}"
						},
						{
							"name": "400 Bad Request - Invalid Product Data",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": "json"
									}
								},
								"url": {
									"raw": "https://8cb59922-6e6c-4153-936c-6b99f73acdcf.mock.pstmn.io/products/1",
									"protocol": "https",
									"host": [
										"8cb59922-6e6c-4153-936c-6b99f73acdcf",
										"mock",
										"pstmn",
										"io"
									],
									"path": [
										"products",
										"1"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\"error\": \"Invalid product data\"}"
						}
					]
				}
			]
		},
		{
			"name": "Orders",
			"item": [
				{
					"name": "POST /orders",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"productId\":1,\"quantity\":2,\"customer\":\"alice\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://8cb59922-6e6c-4153-936c-6b99f73acdcf.mock.pstmn.io/orders",
							"protocol": "https",
							"host": [
								"8cb59922-6e6c-4153-936c-6b99f73acdcf",
								"mock",
								"pstmn",
								"io"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": [
						{
							"name": "201 Created - Order Confirmation",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"productId\":1,\"quantity\":2,\"customer\":\"alice\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://8cb59922-6e6c-4153-936c-6b99f73acdcf.mock.pstmn.io/orders",
									"protocol": "https",
									"host": [
										"8cb59922-6e6c-4153-936c-6b99f73acdcf",
										"mock",
										"pstmn",
										"io"
									],
									"path": [
										"orders"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": ""
								}
							],
							"cookie": [],
							"body": "{\n  \"orderId\": 5001,\n  \"status\": \"confirmed\",\n  \"productId\": 1,\n  \"quantity\": 2,\n  \"customer\": \"alice\",\n  \"orderDate\": \"2024-06-10T12:34:56Z\"\n}"
						},
						{
							"name": "400 Bad Request - Invalid Order Data",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"productId\":1,\"quantity\":0,\"customer\":\"alice\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://8cb59922-6e6c-4153-936c-6b99f73acdcf.mock.pstmn.io/orders",
									"protocol": "https",
									"host": [
										"8cb59922-6e6c-4153-936c-6b99f73acdcf",
										"mock",
										"pstmn",
										"io"
									],
									"path": [
										"orders"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": ""
								}
							],
							"cookie": [],
							"body": "{\n  \"error\": \"Invalid order data: quantity must be greater than 0\",\n  \"details\": {\n    \"productId\": 1,\n    \"quantity\": 0,\n    \"customer\": \"alice\"\n  }\n}"
						}
					]
				}
			]
		},
		{
			"name": "Categories",
			"item": [
				{
					"name": "GET /categories",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://8cb59922-6e6c-4153-936c-6b99f73acdcf.mock.pstmn.io/categories",
							"protocol": "https",
							"host": [
								"8cb59922-6e6c-4153-936c-6b99f73acdcf",
								"mock",
								"pstmn",
								"io"
							],
							"path": [
								"categories"
							]
						}
					},
					"response": [
						{
							"name": "200 OK - List of Categories",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://8cb59922-6e6c-4153-936c-6b99f73acdcf.mock.pstmn.io/categories",
									"protocol": "https",
									"host": [
										"8cb59922-6e6c-4153-936c-6b99f73acdcf",
										"mock",
										"pstmn",
										"io"
									],
									"path": [
										"categories"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"categoryId\": 1,\n    \"name\": \"Electronics\"\n  },\n  {\n    \"categoryId\": 2,\n    \"name\": \"Books\"\n  },\n  {\n    \"categoryId\": 3,\n    \"name\": \"Clothing\"\n  }\n]"
						}
					]
				}
			]
		},
		{
			"name": "Reviews",
			"item": [
				{
					"name": "GET /products/{id}/reviews",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://8cb59922-6e6c-4153-936c-6b99f73acdcf.mock.pstmn.io/products/1/reviews",
							"protocol": "https",
							"host": [
								"8cb59922-6e6c-4153-936c-6b99f73acdcf",
								"mock",
								"pstmn",
								"io"
							],
							"path": [
								"products",
								"1",
								"reviews"
							]
						}
					},
					"response": [
						{
							"name": "200 OK - List of Reviews",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://8cb59922-6e6c-4153-936c-6b99f73acdcf.mock.pstmn.io/products/1/reviews",
									"protocol": "https",
									"host": [
										"8cb59922-6e6c-4153-936c-6b99f73acdcf",
										"mock",
										"pstmn",
										"io"
									],
									"path": [
										"products",
										"1",
										"reviews"
									],
									"variable": [
										{
											"key": "id",
											"value": "1"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": ""
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"reviewId\": 101,\n    \"productId\": 1,\n    \"rating\": 5,\n    \"comment\": \"Excellent product!\",\n    \"user\": \"alice\",\n    \"date\": \"2024-06-01\"\n  },\n  {\n    \"reviewId\": 102,\n    \"productId\": 1,\n    \"rating\": 4,\n    \"comment\": \"Very good, but could be cheaper.\",\n    \"user\": \"bob\",\n    \"date\": \"2024-06-02\"\n  }\n]"
						},
						{
							"name": "404 Not Found - Product does not exist",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://8cb59922-6e6c-4153-936c-6b99f73acdcf.mock.pstmn.io/products/9999/reviews",
									"protocol": "https",
									"host": [
										"8cb59922-6e6c-4153-936c-6b99f73acdcf",
										"mock",
										"pstmn",
										"io"
									],
									"path": [
										"products",
										"9999",
										"reviews"
									],
									"variable": [
										{
											"key": "id",
											"value": "9999"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": ""
								}
							],
							"cookie": [],
							"body": "{\n  \"error\": \"Product not found\",\n  \"productId\": 9999\n}"
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Comprehensive test script for all example responses in this collection",
					"// This script will run for every request in the collection",
					"",
					"// Helper function to deeply compare object keys",
					"function compareKeys(obj, example) {",
					"    if (typeof obj !== typeof example) return false;",
					"    if (Array.isArray(example)) {",
					"        if (!Array.isArray(obj)) return false;",
					"        if (example.length === 0) return true; // Can't check structure if example is empty",
					"        // Check structure of first element",
					"        return compareKeys(obj[0], example[0]);",
					"    }",
					"    if (typeof example === 'object' && example !== null) {",
					"        for (var key in example) {",
					"            if (!(key in obj)) return false;",
					"            if (!compareKeys(obj[key], example[key])) return false;",
					"        }",
					"        return true;",
					"    }",
					"    return true; // Primitive types",
					"}",
					"",
					"// Get all examples for this request (Postman automatically injects pm.examples if present)",
					"if (pm.examples && Object.keys(pm.examples).length > 0) {",
					"    Object.keys(pm.examples).forEach(function(exampleName) {",
					"        var example = pm.examples[exampleName];",
					"        pm.test('Status code matches example: ' + exampleName, function () {",
					"            pm.expect(pm.response.code).to.eql(example.responseCode.code);",
					"        });",
					"        // Try to parse both response and example as JSON",
					"        try {",
					"            var actual = pm.response.json();",
					"            var expected = typeof example.response === 'string' ? JSON.parse(example.response) : example.response;",
					"            pm.test('Response body structure matches example: ' + exampleName, function () {",
					"                pm.expect(compareKeys(actual, expected)).to.be.true;",
					"            });",
					"        } catch (e) {",
					"            // If not JSON, compare as text",
					"            pm.test('Response body matches example (text): ' + exampleName, function () {",
					"                pm.expect(pm.response.text()).to.eql(example.response);",
					"            });",
					"        }",
					"    });",
					"} else {",
					"    pm.test('No examples defined for this request', function () {",
					"        pm.expect(true).to.be.true;",
					"    });",
					"}",
					""
				]
			}
		}
	]
}